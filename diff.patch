diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/Gazprome_TaskManager.iml b/.idea/Gazprome_TaskManager.iml
new file mode 100644
index 0000000..5e764c4
--- /dev/null
+++ b/.idea/Gazprome_TaskManager.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..a1c0b28
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Gazprome_TaskManager.iml" filepath="$PROJECT_DIR$/.idea/Gazprome_TaskManager.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..e4e76c6
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/cmd" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/cmd/main.go b/cmd/main.go
index 0eef41d..4037005 100644
--- a/cmd/main.go
+++ b/cmd/main.go
@@ -1,38 +1,17 @@
 package main
 
 import (
+	"Gazprome_TaskManager/internal_1/handlers"
+	"fmt"
 	"log"
 	"net/http"
-
-	"Gazprome_TaskManager/internal/handlers"
-	"Gazprome_TaskManager/internal/services"
-	"Gazprome_TaskManager/internal/storage"
-	"Gazprome_TaskManager/pkg"
-
-	"github.com/gorilla/mux"
 )
 
 func main() {
-	database, err := pkg.ConnectDB()
-	if err != nil {
-		log.Fatal("Failed to connect to database:", err)
-	}
-	defer database.Close()
-
-	taskRepo := &storage.TaskRepository{DB: database}
-	taskService := &services.TaskService{Repo: taskRepo}
-	taskHandler := &handlers.TaskHandler{Service: taskService}
-
-	r := mux.NewRouter()
-
-	r.HandleFunc("/tasks", taskHandler.CreateTask).Methods("POST")
-	r.HandleFunc("/tasks", taskHandler.GetTasks).Methods("GET")
-	r.HandleFunc("/tasks/{id}", taskHandler.UpdateTaskStatus).Methods("PUT")
-	r.HandleFunc("/tasks/{id}", taskHandler.DeleteTask).Methods("DELETE")
+	http.HandleFunc("/", handlers.FormHandler)
 
-	log.Println("Server is running on port 8080...")
-	err = http.ListenAndServe(":8080", r)
-	if err != nil {
-		log.Fatal("Failed to start server:", err)
+	fmt.Println("Сервер запущен на порту 8080...")
+	if err := http.ListenAndServe(":8080", nil); err != nil {
+		log.Fatalf("Ошибка запуска сервера: %v", err)
 	}
 }
diff --git a/config/config.go b/config/config.go
deleted file mode 100644
index d912156..0000000
--- a/config/config.go
+++ /dev/null
@@ -1 +0,0 @@
-package config
diff --git a/data/records.txt b/data/records.txt
new file mode 100644
index 0000000..b1611ff
--- /dev/null
+++ b/data/records.txt
@@ -0,0 +1,5 @@
+ФИО: Иванов Иван Иванович
+Текст обращения: Прошу помочь с проектом
+Время на выполнение: 24 часа
+Дата обращения: Mon, 19 Aug 2024 00:30:47 MSK
+
diff --git a/go.mod b/go.mod
index ea57a23..413e634 100644
--- a/go.mod
+++ b/go.mod
@@ -1,8 +1,3 @@
 module Gazprome_TaskManager
 
-go 1.22
-
-require (
-    github.com/gorilla/mux v1.8.1
-    github.com/go-sql-driver/mysql v1.8.1
-)
\ No newline at end of file
+go 1.22
\ No newline at end of file
diff --git a/internal/handlers/handlers.go b/internal/handlers/handlers.go
deleted file mode 100644
index 0476585..0000000
--- a/internal/handlers/handlers.go
+++ /dev/null
@@ -1,85 +0,0 @@
-package handlers
-
-import (
-	"encoding/json"
-	"net/http"
-	"strconv"
-
-	"Gazprome_TaskManager/internal/models"
-	"Gazprome_TaskManager/internal/services"
-
-	"github.com/gorilla/mux"
-)
-
-type TaskHandler struct {
-	Service *services.TaskService
-}
-
-func (h *TaskHandler) CreateTask(w http.ResponseWriter, r *http.Request) {
-	var task models.Task
-	err := json.NewDecoder(r.Body).Decode(&task)
-	if err != nil {
-		http.Error(w, "Invalid request payload", http.StatusBadRequest)
-		return
-	}
-
-	err = h.Service.CreateTask(&task)
-	if err != nil {
-		http.Error(w, err.Error(), http.StatusInternalServerError)
-		return
-	}
-
-	w.WriteHeader(http.StatusCreated)
-	json.NewEncoder(w).Encode(task)
-}
-
-func (h *TaskHandler) GetTasks(w http.ResponseWriter, r *http.Request) {
-	tasks, err := h.Service.GetAllTasks()
-	if err != nil {
-		http.Error(w, err.Error(), http.StatusInternalServerError)
-		return
-	}
-
-	json.NewEncoder(w).Encode(tasks)
-}
-
-func (h *TaskHandler) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
-	vars := mux.Vars(r)
-	taskID, err := strconv.Atoi(vars["id"])
-	if err != nil {
-		http.Error(w, "Invalid task ID", http.StatusBadRequest)
-		return
-	}
-
-	var status models.TaskStatus
-	err = json.NewDecoder(r.Body).Decode(&status)
-	if err != nil {
-		http.Error(w, "Invalid request payload", http.StatusBadRequest)
-		return
-	}
-
-	err = h.Service.UpdateTaskStatus(taskID, status.Status)
-	if err != nil {
-		http.Error(w, err.Error(), http.StatusInternalServerError)
-		return
-	}
-
-	w.WriteHeader(http.StatusOK)
-}
-
-func (h *TaskHandler) DeleteTask(w http.ResponseWriter, r *http.Request) {
-	vars := mux.Vars(r)
-	taskID, err := strconv.Atoi(vars["id"])
-	if err != nil {
-		http.Error(w, "Invalid task ID", http.StatusBadRequest)
-		return
-	}
-
-	err = h.Service.DeleteTask(taskID)
-	if err != nil {
-		http.Error(w, err.Error(), http.StatusInternalServerError)
-		return
-	}
-
-	w.WriteHeader(http.StatusNoContent)
-}
diff --git a/internal/models/manager_models.go b/internal/models/manager_models.go
deleted file mode 100644
index daa056a..0000000
--- a/internal/models/manager_models.go
+++ /dev/null
@@ -1,16 +0,0 @@
-package models
-
-import "time"
-
-type Task struct {
-	ID          int       `json:"id"`
-	Requestor   string    `json:"requestor"`
-	Description string    `json:"description"`
-	Deadline    string    `json:"deadline"`
-	Status      string    `json:"status"`
-	CreatedAt   time.Time `json:"created_at"`
-}
-
-type TaskStatus struct {
-	Status string `json:"status"`
-}
diff --git a/internal/services/manager_services.go b/internal/services/manager_services.go
deleted file mode 100644
index 46871e5..0000000
--- a/internal/services/manager_services.go
+++ /dev/null
@@ -1,27 +0,0 @@
-package services
-
-import (
-	"Gazprome_TaskManager/internal/models"
-	"Gazprome_TaskManager/internal/storage"
-)
-
-type TaskService struct {
-	Repo *storage.TaskRepository
-}
-
-func (s *TaskService) CreateTask(task *models.Task) error {
-	task.Status = "скоро приступлю"
-	return s.Repo.CreateTask(task)
-}
-
-func (s *TaskService) GetAllTasks() ([]*models.Task, error) {
-	return s.Repo.GetTasks()
-}
-
-func (s *TaskService) UpdateTaskStatus(id int, status string) error {
-	return s.Repo.UpdateTaskStatus(id, status)
-}
-
-func (s *TaskService) DeleteTask(id int) error {
-	return s.Repo.DeleteTask(id)
-}
diff --git a/internal/storage /db_operation.go b/internal/storage /db_operation.go
deleted file mode 100644
index b5eeb77..0000000
--- a/internal/storage /db_operation.go	
+++ /dev/null
@@ -1,47 +0,0 @@
-package storage
-
-import (
-	"Gazprome_TaskManager/internal/models"
-	"database/sql"
-)
-
-type TaskRepository struct {
-	DB *sql.DB
-}
-
-func (r *TaskRepository) CreateTask(task *models.Task) error {
-	query := "INSERT INTO tasks (requestor, description, deadline, status, created_at) VALUES (?, ?, ?, ?, ?)"
-	_, err := r.DB.Exec(query, task.Requestor, task.Description, task.Deadline, task.Status, task.CreatedAt)
-	return err
-}
-
-func (r *TaskRepository) GetTasks() ([]*models.Task, error) {
-	rows, err := r.DB.Query("SELECT id, requestor, description, deadline, status, created_at FROM tasks")
-	if err != nil {
-		return nil, err
-	}
-	defer rows.Close()
-
-	var tasks []*models.Task
-	for rows.Next() {
-		var task models.Task
-		err := rows.Scan(&task.ID, &task.Requestor, &task.Description, &task.Deadline, &task.Status, &task.CreatedAt)
-		if err != nil {
-			return nil, err
-		}
-		tasks = append(tasks, &task)
-	}
-	return tasks, nil
-}
-
-func (r *TaskRepository) UpdateTaskStatus(id int, status string) error {
-	query := "UPDATE tasks SET status = ? WHERE id = ?"
-	_, err := r.DB.Exec(query, status, id)
-	return err
-}
-
-func (r *TaskRepository) DeleteTask(id int) error {
-	query := "DELETE FROM tasks WHERE id = ?"
-	_, err := r.DB.Exec(query, id)
-	return err
-}
diff --git a/internal_1/handlers/handler_func.go b/internal_1/handlers/handler_func.go
new file mode 100644
index 0000000..2d1d4e5
--- /dev/null
+++ b/internal_1/handlers/handler_func.go
@@ -0,0 +1,43 @@
+package handlers
+
+import (
+	"Gazprome_TaskManager/internal_1/storage"
+	"encoding/json"
+	"fmt"
+	"net/http"
+	"time"
+)
+
+type FormData struct {
+	FIO              string `json:"fio"`
+	TekstObrasheniya string `json:"tekst_obrasheniya"`
+	TimeToComplete   string `json:"time_to_complete"`
+}
+
+func FormHandler(w http.ResponseWriter, r *http.Request) {
+	if r.Method != http.MethodPost {
+		http.Error(w, "Только POST запросы ", http.StatusMethodNotAllowed)
+		return
+	}
+
+	var data FormData
+	err := json.NewDecoder(r.Body).Decode(&data)
+	if err != nil {
+		http.Error(w, "Неверный формат JSON", http.StatusBadRequest)
+		return
+	}
+
+	fmt.Printf("Получены данные: %+v\n", data)
+
+	record := fmt.Sprintf("ФИО: %s\nТекст обращения: %s\nВремя на выполнение: %s\nДата обращения: %s\n\n",
+		data.FIO, data.TekstObrasheniya, data.TimeToComplete, time.Now().Format(time.RFC1123))
+
+	err = storage.SaveToFile(record)
+	if err != nil {
+		http.Error(w, "Не удалось сохранить данные", http.StatusInternalServerError)
+		return
+	}
+
+	w.WriteHeader(http.StatusOK)
+	w.Write([]byte("Данные успешно сохранены"))
+}
diff --git a/internal_1/storage/storage.go b/internal_1/storage/storage.go
new file mode 100644
index 0000000..acb90a0
--- /dev/null
+++ b/internal_1/storage/storage.go
@@ -0,0 +1,18 @@
+package storage
+
+import "os"
+
+func SaveToFile(record string) error {
+	file, err := os.OpenFile("data/records.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
+	if err != nil {
+		return err
+	}
+	defer file.Close()
+
+	_, err = file.WriteString(record)
+	if err != nil {
+		return err
+	}
+
+	return nil
+}
diff --git a/pkg/db.go b/pkg/db.go
deleted file mode 100644
index 2c86eeb..0000000
--- a/pkg/db.go
+++ /dev/null
@@ -1,23 +0,0 @@
-package pkg
-
-import (
-	"database/sql"
-	_ "github.com/go-sql-driver/mysql"
-	"log"
-)
-
-func ConnectDB() (*sql.DB, error) {
-	dsn := "user:password@tcp(127.0.0.1:3306)/taskmanager"
-	db, err := sql.Open("mysql", dsn)
-	if err != nil {
-		log.Fatal("Error connecting to the database:", err)
-		return nil, err
-	}
-
-	if err = db.Ping(); err != nil {
-		log.Fatal("Error pinging the database:", err)
-		return nil, err
-	}
-
-	return db, nil
-}
